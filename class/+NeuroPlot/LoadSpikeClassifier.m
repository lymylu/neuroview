function LoadSpikeClassifier(inputoption)
% add a spike classifier from the cell_metrics.mat generated by CellExplorer
             global FilePath ClassifierInfo ClassifierPath
             if length(inputoption) <2
                  if isempty(ClassifierPath)
                     ClassifierPath=uigetdir('please input the root dir of the ClassifierPath');
                  end
                 % config the Spike Classifier
                 Classlist={'firingRate','putativeCellType','Synapse'};
                 index=listdlg('PromptString','Choose the Spike Class(es)','ListString',Classlist,'SelectionMode','Multiple');
                 tmpobj=findobj(gcf,'Parent',inputoption{1},'Style','text');
                 if isempty(index)
                     try
                        ClassifierInfo=rmfield(ClassifierInfo,'firingRate');
                     end
                     try
                        ClassifierInfo=rmfield(ClassifierInfo,'putativeCellType');
                     end
                     tmpobj.String=[];
                     return
                 end
                 Classlist=Classlist(index);tmpstring=[];
                 for i=1:length(Classlist)
                     switch Classlist{i}
                         case 'firingRate'
                             ClassifierInfo.firingRate=inputdlg({'min rate','max rate'},'input firing rate',2,{'1','10'});
                             tmpstring=[tmpstring,'firingRate_>',ClassifierInfo.firingRate{1},',<',ClassifierInfo.firingRate{2}];
                         case 'putativeCellType'
                             celltype={'Pyramidal Cell','Wide Interneuron','Narrow Interneuron'};
                             index=listdlg('PromptString','Choose the cell type','ListString',celltype,'SelectionMode','Multiple');
                             ClassifierInfo.putativeCellType=celltype(index);
                             tmpstring=[tmpstring,'putativeCellType_'];
                             for j=1:length(ClassifierInfo.putativeCellType)
                                 tmpstring=[tmpstring,ClassifierInfo.putativeCellType{j},','];
                             end
                     end
                     tmpstring=[tmpstring,' '];
                 end
                 tmpobj.String=tmpstring;
             else
                 % Classifier the Spike used the given Classifier
                tmpobj=findobj(gcf,'Parent',inputoption{1},'Style','text');
                if isempty(tmpobj.String)
                    return
                end
                 [path,name]=fileparts(FilePath.Properties.Source);
                 try
                     if ispc
                        cellmetrics=matfile([ClassifierPath,'\',name,'\',name,'.cell_metrics.cellinfo.mat']);
                     else
                        cellmetrics=matfile([ClassifierPath,'/',name,'/',name,'.cell_metrics.cellinfo.mat']);
                     end
                 catch
                     disp('No cellinfo found!');
                     ClassifierPath=[];
                     return
                 end
                 cellmetrics=cellmetrics.cell_metrics;
                 Namelist=arrayfun(@(x,y) ['cluster',num2str(x),'_',num2str(y)],cellmetrics.electrodeGroup,cellmetrics.cluID,'UniformOutput',0);
                 tmpobj=findobj(gcf,'Parent',inputoption{1},'Style','text');
                 Class=fieldnames(ClassifierInfo)
                 for i=1:length(Class)
                     switch Class{i}
                         case 'firingRate'
                             minfiring=ClassifierInfo.firingRate{1};
                             maxfiring=ClassifierInfo.firingRate{2};
                             indexmin=1:length(Namelist);indexmax=1:length(Namelist);
                             if ~isempty(minfiring)
                                 indexmin=find(cellmetrics.firingRate>str2num(minfiring))
                             end
                             if ~isempty(maxfiring)
                                 indexmax=find(cellmetrics.firingRate<str2num(maxfiring))
                             end
                             index{i}=intersect(indexmin,indexmax)
                         case 'putativeCellType'
                             index{i}=[];
                            for j=1:length(ClassifierInfo.putativeCellType)
                                tmpindex=contains(cellmetrics.putativeCellType,ClassifierInfo.putativeCellType{j});
                                index{i}=union(index{i},find(tmpindex==1));
                            end
                     end
                     inputoption{2}.String=intersect(Namelist(index{i}),inputoption{2}.String);
                     try
                     inputoption{2}.Value=1;
                     end
                 end
             end
         end